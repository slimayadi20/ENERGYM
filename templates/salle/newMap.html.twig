<!DOCTYPE html>
<html class='use-all-space'>
<head>
    <meta http-equiv='X-UA-Compatible' content='IE=Edge' />
    <meta charset='UTF-8'>
    <title>Maps SDK for Web - Animated layer</title>
    <meta name='viewport'
          content='width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no'/>
    <link rel='stylesheet' type='text/css' href='https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.18.0/maps/maps.css'>
    <link rel='stylesheet' type='text/css' href='../assets/ui-library/index.css'/>
</head>
<body>
<div id='map' class='map'></div>
<script src='https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.18.0/maps/maps-web.min.js'></script>
<script type='text/javascript' src='../assets/js/mobile-or-tablet.js'></script>
<script>
    var map = tt.map({
        key: 'uRC0EIJSDH2E3fG8xR4dvAiGO4XGqkkE',
        container: 'map',
        zoom: 5,
        center: [19.448674, 51.759399]

    });
    map.addControl(new tt.FullscreenControl());
    map.addControl(new tt.NavigationControl());

    var size = 200;

    // implementation of CustomLayer to draw animated location icon on the map
    // see https://developer.tomtom.com/maps-sdk-web-js/documentation#ICustomLayer for more info
    var locationPoint = {
        width: size,
        height: size,
        data: new Uint8Array(size * size * 4),

        // get rendering context for the map canvas when layer is added to the map
        onAdd: function() {
            var canvas = document.createElement('canvas');
            canvas.width = this.width;
            canvas.height = this.height;
            this.context = canvas.getContext('2d');
        },

        // called once before every frame where the icon will be used
        render: function() {
            var duration = 1100;
            var t = performance.now() % duration / duration;

            var radius = 18 + 2 * this.easeInOutSine(t);
            var outerRadius = 80 * this.easeInOutSine(t) + radius;
            var context = this.context;

            // draw outer circle
            context.clearRect(0, 0, this.width, this.height);
            context.beginPath();
            context.arc(
                this.width / 2,
                this.height / 2,
                outerRadius,
                0,
                Math.PI * 2
            );
            context.fillStyle = 'rgba(0, 145, 255,' + this.easeInOutSine(1 - t) + ')';
            context.fill();

            // draw inner circle
            context.beginPath();
            context.arc(
                this.width / 2,
                this.height / 2,
                radius,
                0,
                Math.PI * 2
            );
            context.fillStyle = 'rgba(0, 145, 255, 1)';
            context.strokeStyle = 'white';
            context.lineWidth = 3 + this.easeInOutSine(1 - t);
            context.fill();
            context.stroke();

            // update this image's data with data from the canvas
            this.data = context.getImageData(
                0,
                0,
                this.width,
                this.height
            ).data;

            // continuously repaint the map, resulting in the smooth animation of the dot
            map.triggerRepaint();

            // return `true` to let the map know that the image was updated
            return true;
        },

        easeInOutSine: function(x) {
            return -(Math.cos(Math.PI * x) - 1) / 2;
        }
    };

    map.on('load', function() {
        map.addImage('pulsing-dot', locationPoint, { pixelRatio: 2 });

        map.addSource('points', {
            'type': 'geojson',
            'data': {
                'type': 'FeatureCollection',
                'features': [
                    {
                        'type': 'Feature',
                        'geometry': {
                            'type': 'Point',
                            'coordinates': [19.448674, 51.759399]
                        }
                    }
                ]
            }
        });
        map.addLayer({
            'id': 'points',
            'type': 'symbol',
            'source': 'points',
            'layout': {
                'icon-image': 'pulsing-dot'
            }
        });
    });
</script>
</body>
</html>